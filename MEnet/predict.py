#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pickle

import pandas as pd
from sklearn.impute import SimpleImputer
import torch
from MEnet import models, utils

'''
reference : pickle of list(model architechture, weight, index of regions, cell labels, imputer)
            generated by train.
'''


def read_input(f_input, input_type, input_filetype, idx_regions):
    if input_filetype == 'auto':
        input_filetype = utils.detect_delim(f_input)

    if input_filetype == 'csv':
        df_input = pd.read_csv(f_input, index_col=0)
    else:
        df_input = pd.read_csv(f_input, sep='\t', index_col=0)

    # #### detect_filetype
    # if input_type == 'auto':
    #     input_type = detect_filetype(df_input)

    print(df_input.head())

    df_input = df_input.reindex[idx_regions]

    return np.numpy(df_inpu)

def predict(args):
    # print(args)

    # print(args.input)
    # print(args.model)

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print("device : ", device)

    with open(args.model, mode='rb') as f:
        model_params = pickle.load(f)

    # print(model_params[0])
    model = models.MEnet(*model_params[0])
    model.load_state_dict(model_params[1])
    model = model.to(device)
    model.eval()

    idx_regions = model_params[2]
    cell_labels = model_params[3]
    imp = model_params[4]

    # print(idx_regions[:3])
    
    X_test = read_input(args.input, args.input_type, args.input_filetype, idx_regions)


    y_pred = model(torch.FloatTensor(imp.transform(x_train)).to(device))

    df_pred = pd.DataFrame(F.softmax(y_pred).cpu().detach().numpy())
    df_pred.index = cell_labels

    print(df_pred)